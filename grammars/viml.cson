name: "VimL"
scopeName: "source.viml"
fileTypes: ["vim", "vimrc", "gvimrc"]
foldingStartMarker: "^(?:if|while|for|fu|function|augroup|aug)"
foldingStopMarker: "(?:endif|endwhile|endfor|endf|endfunction|augroup\\.END|aug\\.END)$"
patterns: [{include: "#main"}]

repository:
	main:
		patterns: [
			{include: "#strings"}
			{include: "#comments"}
			{include: "#numbers"}
			{include: "#functions"}
			{include: "#parameter"}
			{include: "#expr"}
			{include: "#keyword"}
			{include: "#variable"}
			{include: "#support-function"}
			{include: "#support-variable"}
			{include: "#support-type"}
		]
	
	strings:
		patterns: [
			{name: "string.quoted.double.viml", match: '"(\\\\\\\\|\\\\"|[^\\n"])*"'}
			{name: "string.quoted.single.viml", match: "'(''|[^\\n'])*'"}
			{name: "string.regexp.viml",        match: "/(\\\\\\\\|\\\\/|[^\\n/])*/"}
		]
	
	comments:
		patterns: [{
			name: "comment.line.quotes.viml"
			match: '^\\s*(").*$'
			captures:
				1: name: "punctuation.definition.comment.vim"
		},{
			name: "comment.inline.quotes.viml"
			match: '(?!\\$)(")(?!\\{).*$\\n?'
			captures:
				1: name: "punctuation.definition.comment.vim"
		}]

	numbers:
		patterns: [
			{name: "constant.numeric.hex.viml",     match: "#[0-9A-Fa-f]{6}"}
			{name: "constant.numeric.integer.viml", match: "-?\\d+"}
		]
	
	functions:
		patterns: [
			{name: "storage.function.viml",      match: "\\b(fu(n|nction)?|end(f|fu|fun|function)?)\\b"}
			{name: "entity.name.function.viml",  match: "(([sSgGbBwWtTlL]|)?:?\\w+)(?=\\()"}
		]
	
	parameter:
		patterns: [{
			name: "meta.parameter.viml"
			match: "(-)(\\w+)(=)"
			captures:
				1: name: "punctuation.definition.parameter.viml"
				2: name: "entity.name.parameter.viml"
				3: name: "punctuation.assignment.parameter.viml"
		}]
	
	expr:
		patterns: [{
			name: "storage.function.viml"
			match: '(\\|\\||&&|==(\\?|#)?|(!|>|<)=(#|\\?)?|(=|!)~(#|\\?)?|(>|<)(#|\\?)is|isnot|\\.|\\*|\\\\|%)'
		}]
	
	keyword:
		patterns: [{
			name: "keyword.control.viml"
			match: "\\b(if|while|for|return|end(if|for|while)?|au(g|group)|else(if|)?|do|in|:)\\b"
		}]
	
	variable:
		patterns: [{
			name: "variable.other.viml"
			match: "([sSgGbBwWlLaAvV]:|[@$]|&(?!&))\\w*"
		}]
	
	"support-function":
		patterns: [{
			name: "support.function.viml"
			match: "\\b(set(local|global)?|let|command|filetype|colorscheme|\\w*map|syn|exe(c|cute)?|ec(ho|)?|au(tocmd|)?)\\b"
		}]
	
	"support-type":
		patterns: [{
			name: "support.type.viml"
			match: "<.*?>"
		}]
	
	"support-variable":
		patterns: [{
			name: "support.variable.viml"
			match: "\\b(am(enu|)?|(hl|inc)?search|[Bb]uf([Nn]ew[Ff]ile|[Rr]ead)?|[Ff]ile[Tt]ype)\\b"
		}]
	
